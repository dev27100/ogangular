{
	"anms": {
		"examples": {
			"auth": {
				"description1": "This component is only accessible for authenticated users",
				"description2": "Logging out will cause user to be redirected to home screen if visiting route accessible only to authenticated users",
				"title": "Authenticated component"
			},
			"crud": {
				"add": "Add a new book",
				"cancel": "Cancel",
				"empty": "Looks like you don't have any books, let's add some!",
				"error": "is required",
				"new": "New",
				"placeholder0": "Id",
				"placeholder1": "Title",
				"placeholder2": "Author",
				"placeholder3": "Description",
				"save": "Save",
				"subtitle1": "Your books",
				"subtitle2": "Book editor",
				"text": "Books can be managed in this editor and are added, updated, deleted and selected through ",
				"title": "CRUD books using @ngrx/entity & @ngrx/router-store",
				"tooltip": {
					"delete": "Delete book",
					"deselect": "Deselect book",
					"edit": "Edit book"
				}
			},
			"form": {
				"autosave": "Auto Save",
				"error1": "is required",
				"error2": "should be valid",
				"error3": "should be longer than",
				"error4": "should be smaller than",
				"placeholder1": "Username",
				"placeholder2": "Password",
				"placeholder3": "E-mail",
				"placeholder4": "Description",
				"placeholder5": "Birthday",
				"reset": "Reset",
				"save": "Save",
				"send": "Send",
				"subtitle1": "The form",
				"subtitle2": "Marketing information",
				"text1": "Request a gift.",
				"text2": "Rate this form:",
				"text3": "You have to request a gift to see more information.",
				"text4": "Gift sended!",
				"text5": "No gift sended.",
				"text6": "Clap",
				"title": "Reactive form using a form builder"
			},
			"menu": {
				"auth": "Auth",
				"crud": "CRUD",
				"form": "Form",
				"notifications": "Notifications",
				"stocks": "Stocks",
				"theming": "Theming",
				"todos": "Todos"
			},
			"notifications": {
				"default": {
					"description": "Default notifications for events of low importance",
					"title": "Default"
				},
				"error": {
					"description": "Error notifications, when things go really wrong...",
					"title": "Error"
				},
				"info": {
					"description": "Info notifications for events of medium importance",
					"title": "Info"
				},
				"success": {
					"description": "Success notifications for reporting of a successful end of an operation or action",
					"title": "Success"
				},
				"title": "Notifications",
				"warning": {
					"description": "Warning notifications for events that require user attention",
					"title": "Warning"
				}
			},
			"stocks": {
				"description": "Please provide some valid stock market symbol like:",
				"error1": "Stock",
				"error2": "not found",
				"symbol": "Stock symbol",
				"text1": "Stock market example shows how to implement",
				"text2": "requests using",
				"text3": "module.",
				"text4": "Updating symbol query with different symbol will emit action which updates state with loading flag (reducer) and triggers effect for retrieving of selected stock.",
				"text5": "Actions are debounced and every subsequent request will cancel previous one using",
				"text6": "Success or error actions are emitted on request completion. Loading spinner is removed and stock info or error message is displayed.",
				"title": "Stock market"
			},
			"theming": {
				"child": {
					"description": "child works!",
					"subtitle": "should be without style",
					"title": "childs h1"
				},
				"parent": {
					"description": "parent works!",
					"text1": "Theme styles are not imported in component's",
					"text10": "in css rules to enhance their specificity. For example checkout theme file of this component:",
					"text2": "property of",
					"text3": "decorator but in the main",
					"text4": "file. Because of this, theme styles are",
					"text5": "NOT",
					"text6": "scoped to the component automatically.",
					"text7": "We have to use",
					"text8": "specific",
					"text9": "selectors to prevent styles from leaking into child components. This can be achieved by using",
					"title": "Theme scoping with nested components"
				}
			},
			"title": "Examples",
			"todos": {
				"added": {
					"notification": "{{name}} added"
				},
				"example": "Todo example",
				"filter": {
					"active": "Active",
					"all": "All",
					"description": "Displaying",
					"done": "Done",
					"item": "todo",
					"items": "todos",
					"none": "none",
					"notification": "Filtered to",
					"one": "one"
				},
				"input": "I am going to...",
				"list": "Todo list",
				"remove": {
					"notification": "Removed done todos"
				},
				"text1": "This is a classic",
				"text2": "todo",
				"text3": "example with support for adding, toggling, removing and filtering of the todo items.",
				"text4": "State handling is implemented using",
				"text5": "module and support for lazy loaded reducers (this is a lazy loaded feature module).",
				"text6": "Todos are persisted into local storage so you should see your todos also on later visits when using the same browser.",
				"toggle": {
					"notification": "Toggled {{name}} to"
				},
				"tooltip": {
					"add": "Add new todo",
					"remove": "Remove done todos"
				},
				"undo": "Undo"
			}
		}
	}
}
